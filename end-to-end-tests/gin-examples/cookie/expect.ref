--- a/main.go
+++ b/main.go
@@ -2,12 +2,20 @@
 
 import (
 	"net/http"
+	"time"
 
 	"github.com/gin-gonic/gin"
+	"github.com/newrelic/go-agent/v3/integrations/nrgin"
+	"github.com/newrelic/go-agent/v3/newrelic"
 )
 
-func CookieTool() gin.HandlerFunc {
+func CookieTool(nrTxn *newrelic.Transaction) gin.HandlerFunc {
+	defer nrTxn.StartSegment("CookieTool").End()
+
 	return func(c *gin.Context) {
+		// NR WARN: Unchecked Error, please consult New Relic documentation on error capture
+		// https://docs.newrelic.com/docs/apm/agents/go-agent/api-guides/guide-using-go-agent-api/#errors
+		//
 		// Get cookie
 		if cookie, err := c.Cookie("label"); err == nil {
 			if cookie == "ok" {
@@ -23,17 +26,37 @@
 }
 
 func main() {
+	NewRelicAgent, err := newrelic.NewApplication(newrelic.ConfigFromEnvironment())
+	if err != nil {
+		panic(err)
+	}
+
 	route := gin.Default()
 
+	route.Use(nrgin.Middleware(NewRelicAgent))
+
+	// NR WARN: Since the handler function name is used as the transaction name,
+	// anonymous functions do not get usefully named.
+	// We encourage transforming anonymous functions into named functions
 	route.GET("/login", func(c *gin.Context) {
+		nrTxn := nrgin.Transaction(c)
+
+		defer nrTxn.StartSegment("/login").End()
 		// Set cookie {"label": "ok" }, maxAge 30 seconds.
 		c.SetCookie("label", "ok", 30, "/", "localhost", false, true)
 		c.String(200, "Login success!")
 	})
 
-	route.GET("/home", CookieTool(), func(c *gin.Context) {
+	nrTxn := NewRelicAgent.StartTransaction("CookieTool")
+	route.GET("/home", CookieTool(nrTxn), func(c *gin.Context) {
+		nrTxn := nrgin.Transaction(c)
+
+		defer nrTxn.StartSegment("/home").End()
 		c.JSON(200, gin.H{"data": "Your home page"})
 	})
+	nrTxn.End()
 
 	route.Run(":8080")
+
+	NewRelicAgent.Shutdown(5 * time.Second)
 }
