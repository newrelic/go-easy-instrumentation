--- a/close/server.go
+++ b/close/server.go
@@ -11,11 +11,24 @@
 	"time"
 
 	"github.com/gin-gonic/gin"
+	"github.com/newrelic/go-agent/v3/integrations/nrgin"
+	"github.com/newrelic/go-agent/v3/newrelic"
 )
 
 func main() {
+	NewRelicAgent, err := newrelic.NewApplication(newrelic.ConfigFromEnvironment())
+	if err != nil {
+		panic(err)
+	}
+
 	router := gin.Default()
+	router.Use(nrgin.Middleware(NewRelicAgent))
 	router.GET("/", func(c *gin.Context) {
+		// NR WARN: function literal segments will be named "function literal" by default
+		// declare a function instead to improve segment name generation
+		nrTxn := nrgin.Transaction(c)
+		defer nrTxn.StartSegment("function literal").End()
+
 		time.Sleep(5 * time.Second)
 		c.String(http.StatusOK, "Welcome Gin Server")
 	})
@@ -28,6 +36,8 @@
 	quit := make(chan os.Signal)
 	signal.Notify(quit, os.Interrupt)
 
+	// NR INFO: go-easy-instrumentation doesn't support tracing goroutines in a main method; please instrument manually.
+	// https://docs.newrelic.com/docs/apm/agents/go-agent/instrumentation/instrument-go-transactions/#goroutines
 	go func() {
 		<-quit
 		log.Println("receive interrupt signal")
@@ -45,4 +55,6 @@
 	}
 
 	log.Println("Server exiting")
+
+	NewRelicAgent.Shutdown(5 * time.Second)
 }
--- a/graceful-shutdown/notify-with-context/server.go
+++ b/graceful-shutdown/notify-with-context/server.go
@@ -11,15 +11,28 @@
 	"time"
 
 	"github.com/gin-gonic/gin"
+	"github.com/newrelic/go-agent/v3/integrations/nrgin"
+	"github.com/newrelic/go-agent/v3/newrelic"
 )
 
 func main() {
+	NewRelicAgent, err := newrelic.NewApplication(newrelic.ConfigFromEnvironment())
+	if err != nil {
+		panic(err)
+	}
+
 	// Create context that listens for the interrupt signal from the OS.
 	ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
 	defer stop()
 
 	router := gin.Default()
+	router.Use(nrgin.Middleware(NewRelicAgent))
 	router.GET("/", func(c *gin.Context) {
+		// NR WARN: function literal segments will be named "function literal" by default
+		// declare a function instead to improve segment name generation
+		nrTxn := nrgin.Transaction(c)
+		defer nrTxn.StartSegment("function literal").End()
+
 		time.Sleep(10 * time.Second)
 		c.String(http.StatusOK, "Welcome Gin Server")
 	})
@@ -29,6 +33,9 @@
 		Handler: router,
 	}
 
+	// NR INFO: go-easy-instrumentation doesn't support tracing goroutines in a main method; please instrument manually.
+	// https://docs.newrelic.com/docs/apm/agents/go-agent/instrumentation/instrument-go-transactions/#goroutines
+	//
 	// Initializing the server in a goroutine so that
 	// it won't block the graceful shutdown handling below
 	go func() {
@@ -53,4 +60,6 @@
 	}
 
 	log.Println("Server exiting")
+
+	NewRelicAgent.Shutdown(5 * time.Second)
 }
--- a/graceful-shutdown/notify-without-context/server.go
+++ b/graceful-shutdown/notify-without-context/server.go
@@ -13,11 +13,24 @@
 	"time"
 
 	"github.com/gin-gonic/gin"
+	"github.com/newrelic/go-agent/v3/integrations/nrgin"
+	"github.com/newrelic/go-agent/v3/newrelic"
 )
 
 func main() {
+	NewRelicAgent, err := newrelic.NewApplication(newrelic.ConfigFromEnvironment())
+	if err != nil {
+		panic(err)
+	}
+
 	router := gin.Default()
+	router.Use(nrgin.Middleware(NewRelicAgent))
 	router.GET("/", func(c *gin.Context) {
+		// NR WARN: function literal segments will be named "function literal" by default
+		// declare a function instead to improve segment name generation
+		nrTxn := nrgin.Transaction(c)
+		defer nrTxn.StartSegment("function literal").End()
+
 		time.Sleep(5 * time.Second)
 		c.String(http.StatusOK, "Welcome Gin Server")
 	})
@@ -27,6 +35,9 @@
 		Handler: router,
 	}
 
+	// NR INFO: go-easy-instrumentation doesn't support tracing goroutines in a main method; please instrument manually.
+	// https://docs.newrelic.com/docs/apm/agents/go-agent/instrumentation/instrument-go-transactions/#goroutines
+	//
 	// Initializing the server in a goroutine so that
 	// it won't block the graceful shutdown handling below
 	go func() {
@@ -54,4 +65,6 @@
 	}
 
 	log.Println("Server exiting")
+
+	NewRelicAgent.Shutdown(5 * time.Second)
 }
