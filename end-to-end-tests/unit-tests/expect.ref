--- a/main.go
+++ b/main.go
@@ -4,33 +4,69 @@
 	// "context"
 	"context"
 	"fmt"
+	"time"
 	"unit-tests/pkg1"
 	"unit-tests/pkg2"
 	"unit-tests/pkg3"
 	"unit-tests/pkg4"
+
+	"github.com/newrelic/go-agent/v3/newrelic"
 )
 
 func main() {
+	NewRelicAgent, agentInitError := newrelic.NewApplication(newrelic.ConfigFromEnvironment())
+	if agentInitError != nil {
+		panic(agentInitError)
+	}
+
 	fmt.Println("Running complex test app")
-	pkg1.Func1()
-	a := pkg1.Add(2, 3)
-	a = pkg1.Subtract(a, 2)
-	pkg2.Func2()
-	a = pkg2.Multiply(a, 6)
-	a, err := pkg2.Divide(a, 2)
+	nrTxn := NewRelicAgent.StartTransaction("Func1")
+	pkg1.Func1(nrTxn)
+	nrTxn.End()
+	nrTxn = NewRelicAgent.StartTransaction("Add")
+	a := pkg1.Add(2, 3, nrTxn)
+	nrTxn.End()
+	nrTxn = NewRelicAgent.StartTransaction("Subtract")
+	a = pkg1.Subtract(a, 2, nrTxn)
+	nrTxn.End()
+	nrTxn = NewRelicAgent.StartTransaction("Func2")
+	pkg2.Func2(nrTxn)
+	nrTxn.End()
+	nrTxn = NewRelicAgent.StartTransaction("Multiply")
+	a = pkg2.Multiply(a, 6, nrTxn)
+	nrTxn.End()
+	nrTxn = NewRelicAgent.StartTransaction("Divide")
+	a, err := pkg2.Divide(a, 2, nrTxn)
+	nrTxn.End()
 	if err != nil {
 		fmt.Println(err)
 	}
 	fmt.Printf("result: %d\n", a)
-	pkg3.Func3()
-	str := pkg3.Concat("hello", "world")
-	split := pkg3.Split(str, "")
+	nrTxn = NewRelicAgent.StartTransaction("Func3")
+	pkg3.Func3(nrTxn)
+	nrTxn.End()
+	nrTxn = NewRelicAgent.StartTransaction("Concat")
+	str := pkg3.Concat("hello", "world", nrTxn)
+	nrTxn.End()
+	nrTxn = NewRelicAgent.StartTransaction("Split")
+	split := pkg3.Split(str, "", nrTxn)
+	nrTxn.End()
 	fmt.Println(split)
 
 	// context should get wrapped with a transaction
-	fmt.Println(pkg3.UnrulyFunction("hello", "world", context.Background()))
-	fmt.Println(pkg3.CrazyFunction("hello", 42, []string{"foo", "bar"}, map[string]int{"baz": 1, "qux": 2}, struct{ X, Y int }{X: 3, Y: 4}, context.Background()))
+	nrTxn = NewRelicAgent.StartTransaction("UnrulyFunction")
+	fmt.Println(pkg3.UnrulyFunction("hello", "world", newrelic.NewContext(context.Background(), nrTxn)))
+	nrTxn.End()
+	nrTxn = NewRelicAgent.StartTransaction("CrazyFunction")
+	fmt.Println(pkg3.CrazyFunction("hello", 42, []string{"foo", "bar"}, map[string]int{"baz": 1, "qux": 2}, struct{ X, Y int }{X: 3, Y: 4}, newrelic.NewContext(context.Background(), nrTxn)))
+	nrTxn.End()
 
-	counter := pkg4.NewCounter(pkg3.Concat("hello ", "world")) // Use pkg3.Concat to set the name
-	counter.GetChild().DecodeSecret()
+	nrTxn = NewRelicAgent.StartTransaction("NewCounter")
+	counter := pkg4.NewCounter(pkg3.Concat("hello ", "world", nrTxn), nrTxn)
+	nrTxn.End() // Use pkg3.Concat to set the name
+	nrTxn = NewRelicAgent.StartTransaction("DecodeSecret")
+	counter.GetChild(nrTxn).DecodeSecret(nrTxn)
+	nrTxn.End()
+
+	NewRelicAgent.Shutdown(5 * time.Second)
 }
--- a/pkg1/pkg1.go
+++ b/pkg1/pkg1.go
@@ -1,15 +1,25 @@
 package pkg1
 
-import "fmt"
+import (
+	"fmt"
 
-func Func1() {
+	"github.com/newrelic/go-agent/v3/newrelic"
+)
+
+func Func1(nrTxn *newrelic.Transaction) {
+	defer nrTxn.StartSegment("Func1").End()
+
 	fmt.Println("Func1 in pkg1")
 }
 
-func Add(a, b int) int {
+func Add(a, b int, nrTxn *newrelic.Transaction) int {
+	defer nrTxn.StartSegment("Add").End()
+
 	return a + b
 }
 
-func Subtract(a, b int) int {
+func Subtract(a, b int, nrTxn *newrelic.Transaction) int {
+	defer nrTxn.StartSegment("Subtract").End()
+
 	return a - b
 }
--- a/pkg1/pkg1_test.go
+++ b/pkg1/pkg1_test.go
@@ -8,9 +8,9 @@
 )
 
 func TestAdd(t *testing.T) {
-	assert.Equal(t, 5, Add(2, 3))
-	assert.Equal(t, 0, Add(-1, 1))
-	assert.Equal(t, -5, Add(-2, -3))
+	assert.Equal(t, 5, Add(2, 3, nil))
+	assert.Equal(t, 0, Add(-1, 1, nil))
+	assert.Equal(t, -5, Add(-2, -3, nil))
 }
 
 func TestAddTable(t *testing.T) {
@@ -24,17 +24,17 @@
 
 	for _, tt := range tests {
 		t.Run(fmt.Sprintf("Add(%d,%d)", tt.a, tt.b), func(t *testing.T) {
-			assert.Equal(t, tt.expected, Add(tt.a, tt.b))
+			assert.Equal(t, tt.expected, Add(tt.a, tt.b, nil))
 		})
 	}
 }
 
 func TestSubtract(t *testing.T) {
-	assert.Equal(t, 1, Subtract(3, 2))
-	assert.Equal(t, -2, Subtract(-1, 1))
-	assert.Equal(t, 1, Subtract(-2, -3))
+	assert.Equal(t, 1, Subtract(3, 2, nil))
+	assert.Equal(t, -2, Subtract(-1, 1, nil))
+	assert.Equal(t, 1, Subtract(-2, -3, nil))
 }
 
 func TestFunc1(t *testing.T) {
-	Func1()
+	Func1(nil)
 }
--- a/pkg2/pkg2.go
+++ b/pkg2/pkg2.go
@@ -1,18 +1,34 @@
 package pkg2
 
-import "fmt"
+import (
+	"fmt"
 
-func Func2() {
+	"github.com/newrelic/go-agent/v3/newrelic"
+)
+
+func Func2(nrTxn *newrelic.Transaction) {
+	defer nrTxn.StartSegment("Func2").End()
+
 	fmt.Println("Func2 in pkg2")
 }
 
-func Multiply(a, b int) int {
+func Multiply(a, b int, nrTxn *newrelic.Transaction) int {
+	defer nrTxn.StartSegment("Multiply").End()
+
 	return a * b
 }
 
-func Divide(a, b int) (int, error) {
+func Divide(a, b int, nrTxn *newrelic.Transaction) (int, error) {
+	defer nrTxn.StartSegment("Divide").End()
+
 	if b == 0 {
-		return 0, fmt.Errorf("division by zero")
+		// generated by go-easy-instrumentation; returnValue0:error
+		returnValue0 := fmt.Errorf("division by zero")
+		if returnValue0 != nil {
+			nrTxn.NoticeError(returnValue0)
+		}
+
+		return 0, returnValue0
 	}
 	return a / b, nil
 }
--- a/pkg2/pkg2_test.go
+++ b/pkg2/pkg2_test.go
@@ -29,25 +29,25 @@
 
 func setupMultTest(t *testing.T, a, b, expect int) {
 	t.Helper()
-	assert.Equal(t, expect, Multiply(a, b))
+	assert.Equal(t, expect, Multiply(a, b, nil))
 }
 
 func TestMultiply(t *testing.T) {
 	setupMultTest(t, 2, 3, 6)
-	assert.Equal(t, 36, Multiply(6, 6))
+	assert.Equal(t, 36, Multiply(6, 6, nil))
 }
 
 func BenchmarkMultiply(b *testing.B) {
 	for i := 0; i < b.N; i++ {
-		Multiply(2, 3)
+		Multiply(2, 3, nil)
 	}
 }
 
 func TestDivide(t *testing.T) {
-	result, err := Divide(6, 3)
+	result, err := Divide(6, 3, nil)
 	assert.NoError(t, err)
 	assert.Equal(t, 2, result)
 
-	_, err = Divide(1, 0)
+	_, err = Divide(1, 0, nil)
 	assert.Error(t, err)
 }
--- a/pkg3/pkg3.go
+++ b/pkg3/pkg3.go
@@ -4,26 +4,40 @@
 	"context"
 	"fmt"
 	"strings"
+
+	"github.com/newrelic/go-agent/v3/newrelic"
 )
 
-func Func3() {
+func Func3(nrTxn *newrelic.Transaction) {
+	defer nrTxn.StartSegment("Func3").End()
+
 	fmt.Println("Func3 in pkg3")
 }
 
-func Concat(a, b string) string {
+func Concat(a, b string, nrTxn *newrelic.Transaction) string {
+	defer nrTxn.StartSegment("Concat").End()
+
 	return a + b
 }
 
-func Split(s, sep string) []string {
+func Split(s, sep string, nrTxn *newrelic.Transaction) []string {
+	defer nrTxn.StartSegment("Split").End()
+
 	return strings.Split(s, sep)
 }
 
 func ThingWithContext(ctx context.Context) bool {
+	nrTxn := newrelic.FromContext(ctx)
+	defer nrTxn.StartSegment("ThingWithContext").End()
+
 	return true
 }
 
 // UnrulyFunction is a complex function to test DST code
 func UnrulyFunction(a, b string, ctx context.Context) (string, error) {
+	nrTxn := newrelic.FromContext(ctx)
+	defer nrTxn.StartSegment("UnrulyFunction").End()
+
 	defer func() {
 		if r := recover(); r != nil {
 			fmt.Println("Recovered in UnrulyFunction", r)
@@ -31,20 +28,38 @@
 	}()
 
 	if a == "" {
-		return "", fmt.Errorf("a is empty")
+		// generated by go-easy-instrumentation; returnValue0:error
+		returnValue0 := fmt.Errorf("a is empty")
+		if returnValue0 != nil {
+			nrTxn.NoticeError(returnValue0)
+		}
+
+		return "", returnValue0
 	}
 
-	result := Concat(a, b)
-	parts := Split(result, " ")
+	result := Concat(a, b, nrTxn)
+	parts := Split(result, " ", nrTxn)
 
 	for _, part := range parts {
 		if part == "error" {
-			return "", fmt.Errorf("found error in parts")
+			// generated by go-easy-instrumentation; returnValue0:error
+			returnValue0 := fmt.Errorf("found error in parts")
+			if returnValue0 != nil {
+				nrTxn.NoticeError(returnValue0)
+			}
+
+			return "", returnValue0
 		}
 	}
 
 	if !ThingWithContext(ctx) {
-		return "", fmt.Errorf("context check failed")
+		// generated by go-easy-instrumentation; returnValue0:error
+		returnValue0 := fmt.Errorf("context check failed")
+		if returnValue0 != nil {
+			nrTxn.NoticeError(returnValue0)
+		}
+
+		return "", returnValue0
 	}
 
 	return result, nil
@@ -52,6 +58,9 @@
 
 // CrazyFunction is another complex function to test DST code
 func CrazyFunction(a string, b int, c []string, d map[string]int, e struct{ X, Y int }, ctx context.Context) (string, error) {
+	nrTxn := newrelic.FromContext(ctx)
+	defer nrTxn.StartSegment("CrazyFunction").End()
+
 	defer func() {
 		if r := recover(); r != nil {
 			fmt.Println("Recovered in CrazyFunction", r)
@@ -59,39 +68,75 @@
 	}()
 
 	if a == "" {
-		return "", fmt.Errorf("a is empty")
+		// generated by go-easy-instrumentation; returnValue0:error
+		returnValue0 := fmt.Errorf("a is empty")
+		if returnValue0 != nil {
+			nrTxn.NoticeError(returnValue0)
+		}
+
+		return "", returnValue0
 	}
 
 	if b < 0 {
-		return "", fmt.Errorf("b is negative")
+		// generated by go-easy-instrumentation; returnValue0:error
+		returnValue0 := fmt.Errorf("b is negative")
+		if returnValue0 != nil {
+			nrTxn.NoticeError(returnValue0)
+		}
+
+		return "", returnValue0
 	}
 
 	if len(c) == 0 {
-		return "", fmt.Errorf("c is empty")
+		// generated by go-easy-instrumentation; returnValue0:error
+		returnValue0 := fmt.Errorf("c is empty")
+		if returnValue0 != nil {
+			nrTxn.NoticeError(returnValue0)
+		}
+
+		return "", returnValue0
 	}
 
 	if len(d) == 0 {
-		return "", fmt.Errorf("d is empty")
+		// generated by go-easy-instrumentation; returnValue0:error
+		returnValue0 := fmt.Errorf("d is empty")
+		if returnValue0 != nil {
+			nrTxn.NoticeError(returnValue0)
+		}
+
+		return "", returnValue0
 	}
 
 	if e.X == 0 && e.Y == 0 {
-		return "", fmt.Errorf("e is zero")
+		// generated by go-easy-instrumentation; returnValue0:error
+		returnValue0 := fmt.Errorf("e is zero")
+		if returnValue0 != nil {
+			nrTxn.NoticeError(returnValue0)
+		}
+
+		return "", returnValue0
 	}
 
 	if !ThingWithContext(ctx) {
-		return "", fmt.Errorf("context check failed")
+		// generated by go-easy-instrumentation; returnValue0:error
+		returnValue0 := fmt.Errorf("context check failed")
+		if returnValue0 != nil {
+			nrTxn.NoticeError(returnValue0)
+		}
+
+		return "", returnValue0
 	}
 
-	result := Concat(a, fmt.Sprintf("%d", b))
+	result := Concat(a, fmt.Sprintf("%d", b), nrTxn)
 	for _, s := range c {
-		result = Concat(result, s)
+		result = Concat(result, s, nrTxn)
 	}
 
 	for k, v := range d {
-		result = Concat(result, fmt.Sprintf("%s%d", k, v))
+		result = Concat(result, fmt.Sprintf("%s%d", k, v), nrTxn)
 	}
 
-	result = Concat(result, Concat(" ", "%"))
+	result = Concat(result, Concat(" ", "%", nrTxn), nrTxn)
 
 	return result, nil
 }
--- a/pkg3/pkg3_test.go
+++ b/pkg3/pkg3_test.go
@@ -9,9 +9,9 @@
 )
 
 func TestConcat(t *testing.T) {
-	assert.Equal(t, "hello world", Concat("hello ", "world"))
-	assert.Equal(t, "foo", Concat("f", "oo"))
-	assert.Equal(t, "barbaz", Concat("bar", "baz"))
+	assert.Equal(t, "hello world", Concat("hello ", "world", nil))
+	assert.Equal(t, "foo", Concat("f", "oo", nil))
+	assert.Equal(t, "barbaz", Concat("bar", "baz", nil))
 
 	util.DoSomething()
 }
@@ -19,17 +19,17 @@
 func TestConcatParalell(t *testing.T) {
 	t.Parallel()
 
-	assert.Equal(t, "hello world", Concat("hello ", "world"))
-	assert.Equal(t, "foo", Concat("f", "oo"))
-	assert.Equal(t, "barbaz", Concat("bar", "baz"))
+	assert.Equal(t, "hello world", Concat("hello ", "world", nil))
+	assert.Equal(t, "foo", Concat("f", "oo", nil))
+	assert.Equal(t, "barbaz", Concat("bar", "baz", nil))
 
 	util.DoSomething()
 }
 
 func TestSplit(t *testing.T) {
-	assert.Equal(t, []string{"a", "b", "c"}, Split("a,b,c", ","))
-	assert.Equal(t, []string{"foo", "bar"}, Split("foo bar", " "))
-	assert.Equal(t, []string{"hello", "world"}, Split("hello-world", "-"))
+	assert.Equal(t, []string{"a", "b", "c"}, Split("a,b,c", ",", nil))
+	assert.Equal(t, []string{"foo", "bar"}, Split("foo bar", " ", nil))
+	assert.Equal(t, []string{"hello", "world"}, Split("hello-world", "-", nil))
 }
 
 func TestThingWithContext(t *testing.T) {
--- a/pkg4/obj.go
+++ b/pkg4/obj.go
@@ -3,17 +3,22 @@
 import (
 	"encoding/base64"
 	"fmt"
+
+	"github.com/newrelic/go-agent/v3/newrelic"
 )
 
 type Child struct {
 	secret string
 }
 
-func (c *Child) DecodeSecret() string {
+func (c *Child) DecodeSecret(nrTxn *newrelic.Transaction) string {
+	defer nrTxn.StartSegment("DecodeSecret").End()
+
 	// Decode the base64 encoded secret
 	decodedBytes, err := base64.StdEncoding.DecodeString(c.secret)
 	if err != nil {
 		// Handle error in decoding
+		nrTxn.NoticeError(err)
 		return "Error decoding secret: " + err.Error()
 	}
 	// Return the decoded string
@@ -26,7 +21,9 @@
 	child *Child // Embedding Child struct to demonstrate composition
 }
 
-func NewCounter(name string) *Counter {
+func NewCounter(name string, nrTxn *newrelic.Transaction) *Counter {
+	defer nrTxn.StartSegment("NewCounter").End()
+
 	return &Counter{
 		name:  name,
 		count: 0, // Initialize count to 0
@@ -44,7 +41,9 @@
 	return e.count
 }
 
-func (e *Counter) GetChild() *Child {
+func (e *Counter) GetChild(nrTxn *newrelic.Transaction) *Child {
+	defer nrTxn.StartSegment("GetChild").End()
+
 	return e.child
 }

