--- a/main.go
+++ b/main.go
@@ -2,25 +2,53 @@
 
 import (
 	"fmt"
+	"time"
 	"unit-tests/pkg1"
 	"unit-tests/pkg2"
 	"unit-tests/pkg3"
+
+	"github.com/newrelic/go-agent/v3/newrelic"
 )
 
 func main() {
+	NewRelicAgent, agentInitError := newrelic.NewApplication(newrelic.ConfigFromEnvironment())
+	if agentInitError != nil {
+		panic(agentInitError)
+	}
+
 	fmt.Println("Running complex test app")
-	pkg1.Func1()
-	a := pkg1.Add(2, 3)
-	a = pkg1.Subtract(a, 2)
-	pkg2.Func2()
-	a = pkg2.Multiply(a, 6)
-	a, err := pkg2.Divide(a, 2)
+	nrTxn := NewRelicAgent.StartTransaction("Func1")
+	pkg1.Func1(nrTxn)
+	nrTxn.End()
+	nrTxn = NewRelicAgent.StartTransaction("Add")
+	a := pkg1.Add(2, 3, nrTxn)
+	nrTxn.End()
+	nrTxn = NewRelicAgent.StartTransaction("Subtract")
+	a = pkg1.Subtract(a, 2, nrTxn)
+	nrTxn.End()
+	nrTxn = NewRelicAgent.StartTransaction("Func2")
+	pkg2.Func2(nrTxn)
+	nrTxn.End()
+	nrTxn = NewRelicAgent.StartTransaction("Multiply")
+	a = pkg2.Multiply(a, 6, nrTxn)
+	nrTxn.End()
+	nrTxn = NewRelicAgent.StartTransaction("Divide")
+	a, err := pkg2.Divide(a, 2, nrTxn)
+	nrTxn.End()
 	if err != nil {
 		fmt.Println(err)
 	}
 	fmt.Printf("result: %d\n", a)
-	pkg3.Func3()
-	str := pkg3.Concat("hello", "world")
-	split := pkg3.Split(str, "")
+	nrTxn = NewRelicAgent.StartTransaction("Func3")
+	pkg3.Func3(nrTxn)
+	nrTxn.End()
+	nrTxn = NewRelicAgent.StartTransaction("Concat")
+	str := pkg3.Concat("hello", "world", nrTxn)
+	nrTxn.End()
+	nrTxn = NewRelicAgent.StartTransaction("Split")
+	split := pkg3.Split(str, "", nrTxn)
+	nrTxn.End()
 	fmt.Println(split)
+
+	NewRelicAgent.Shutdown(5 * time.Second)
 }
--- a/pkg1/pkg1.go
+++ b/pkg1/pkg1.go
@@ -1,15 +1,25 @@
 package pkg1
 
-import "fmt"
+import (
+	"fmt"
 
-func Func1() {
+	"github.com/newrelic/go-agent/v3/newrelic"
+)
+
+func Func1(nrTxn *newrelic.Transaction) {
+	defer nrTxn.StartSegment("Func1").End()
+
 	fmt.Println("Func1 in pkg1")
 }
 
-func Add(a, b int) int {
+func Add(a, b int, nrTxn *newrelic.Transaction) int {
+	defer nrTxn.StartSegment("Add").End()
+
 	return a + b
 }
 
-func Subtract(a, b int) int {
+func Subtract(a, b int, nrTxn *newrelic.Transaction) int {
+	defer nrTxn.StartSegment("Subtract").End()
+
 	return a - b
 }
--- a/pkg1/pkg1_test.go
+++ b/pkg1/pkg1_test.go
@@ -7,17 +7,17 @@
 )
 
 func TestAdd(t *testing.T) {
-	assert.Equal(t, 5, Add(2, 3))
-	assert.Equal(t, 0, Add(-1, 1))
-	assert.Equal(t, -5, Add(-2, -3))
+	assert.Equal(t, 5, Add(2, 3, nil))
+	assert.Equal(t, 0, Add(-1, 1, nil))
+	assert.Equal(t, -5, Add(-2, -3, nil))
 }
 
 func TestSubtract(t *testing.T) {
-	assert.Equal(t, 1, Subtract(3, 2))
-	assert.Equal(t, -2, Subtract(-1, 1))
-	assert.Equal(t, 1, Subtract(-2, -3))
+	assert.Equal(t, 1, Subtract(3, 2, nil))
+	assert.Equal(t, -2, Subtract(-1, 1, nil))
+	assert.Equal(t, 1, Subtract(-2, -3, nil))
 }
 
 func TestFunc1(t *testing.T) {
-	Func1()
+	Func1(nil)
 }
--- a/pkg2/pkg2.go
+++ b/pkg2/pkg2.go
@@ -1,18 +1,34 @@
 package pkg2
 
-import "fmt"
+import (
+	"fmt"
 
-func Func2() {
+	"github.com/newrelic/go-agent/v3/newrelic"
+)
+
+func Func2(nrTxn *newrelic.Transaction) {
+	defer nrTxn.StartSegment("Func2").End()
+
 	fmt.Println("Func2 in pkg2")
 }
 
-func Multiply(a, b int) int {
+func Multiply(a, b int, nrTxn *newrelic.Transaction) int {
+	defer nrTxn.StartSegment("Multiply").End()
+
 	return a * b
 }
 
-func Divide(a, b int) (int, error) {
+func Divide(a, b int, nrTxn *newrelic.Transaction) (int, error) {
+	defer nrTxn.StartSegment("Divide").End()
+
 	if b == 0 {
-		return 0, fmt.Errorf("division by zero")
+		// generated by go-easy-instrumentation; returnValue0:error
+		returnValue0 := fmt.Errorf("division by zero")
+		if returnValue0 != nil {
+			nrTxn.NoticeError(returnValue0)
+		}
+
+		return 0, returnValue0
 	}
 	return a / b, nil
 }
--- a/pkg2/pkg2_test.go
+++ b/pkg2/pkg2_test.go
@@ -7,16 +7,16 @@
 )
 
 func TestMultiply(t *testing.T) {
-	assert.Equal(t, 6, Multiply(2, 3))
-	assert.Equal(t, 0, Multiply(0, 1))
-	assert.Equal(t, -6, Multiply(-2, 3))
+	assert.Equal(t, 6, Multiply(2, 3, nil))
+	assert.Equal(t, 0, Multiply(0, 1, nil))
+	assert.Equal(t, -6, Multiply(-2, 3, nil))
 }
 
 func TestDivide(t *testing.T) {
-	result, err := Divide(6, 3)
+	result, err := Divide(6, 3, nil)
 	assert.NoError(t, err)
 	assert.Equal(t, 2, result)
 
-	_, err = Divide(1, 0)
+	_, err = Divide(1, 0, nil)
 	assert.Error(t, err)
 }
--- a/pkg3/pkg3.go
+++ b/pkg3/pkg3.go
@@ -3,16 +3,24 @@
 import (
 	"fmt"
 	"strings"
+
+	"github.com/newrelic/go-agent/v3/newrelic"
 )
 
-func Func3() {
+func Func3(nrTxn *newrelic.Transaction) {
+	defer nrTxn.StartSegment("Func3").End()
+
 	fmt.Println("Func3 in pkg3")
 }
 
-func Concat(a, b string) string {
+func Concat(a, b string, nrTxn *newrelic.Transaction) string {
+	defer nrTxn.StartSegment("Concat").End()
+
 	return a + b
 }
 
-func Split(s, sep string) []string {
+func Split(s, sep string, nrTxn *newrelic.Transaction) []string {
+	defer nrTxn.StartSegment("Split").End()
+
 	return strings.Split(s, sep)
 }
--- a/pkg3/pkg3_test.go
+++ b/pkg3/pkg3_test.go
@@ -7,13 +7,13 @@
 )
 
 func TestConcat(t *testing.T) {
-	assert.Equal(t, "hello world", Concat("hello ", "world"))
-	assert.Equal(t, "foo", Concat("f", "oo"))
-	assert.Equal(t, "barbaz", Concat("bar", "baz"))
+	assert.Equal(t, "hello world", Concat("hello ", "world", nil))
+	assert.Equal(t, "foo", Concat("f", "oo", nil))
+	assert.Equal(t, "barbaz", Concat("bar", "baz", nil))
 }
 
 func TestSplit(t *testing.T) {
-	assert.Equal(t, []string{"a", "b", "c"}, Split("a,b,c", ","))
-	assert.Equal(t, []string{"foo", "bar"}, Split("foo bar", " "))
-	assert.Equal(t, []string{"hello", "world"}, Split("hello-world", "-"))
+	assert.Equal(t, []string{"a", "b", "c"}, Split("a,b,c", ",", nil))
+	assert.Equal(t, []string{"foo", "bar"}, Split("foo bar", " ", nil))
+	assert.Equal(t, []string{"hello", "world"}, Split("hello-world", "-", nil))
 }
