#!/usr/bin/env python3
import json
import sys
import subprocess
import os
import uuid

DEFAULT_REF_FILE_NAME   = "expect.ref"
TEST_CASE_FILE_NAME = "end-to-end-tests/testcases.json"
cleanup = True

dirname = os.path.basename(os.getcwd())
if dirname != "go-easy-instrumentation":
    print(f"\33[1;31mERROR\33[0m This script must be run from the 'go-easy-instrumentation' directory, not {dirname}")
    sys.exit(1)

if len(sys.argv) == 2:
    if sys.argv[1] == "--no-clean":
        cleanup = False

with open(TEST_CASE_FILE_NAME) as testfile:
    tests = json.load(testfile)

fails = 0

for testnumber, testcase in enumerate(tests['tests']):
    referenceFile = None

    if 'dir' not in testcase:
        print(f"\33[1;31mERROR\33[0m Testcase #{testnumber} missing 'dir' field")
        fails += 1
        continue
    if not os.path.isdir(testcase['dir']):
        print(f"\33[1;31mERROR\33[0m Testcase #{testnumber} 'dir' field %s is an invalid file path", testcase['dir'])
        fails += 1
        continue

    if 'cmp' not in testcase:
        referenceFile = os.path.join(testcase['dir'], DEFAULT_REF_FILE_NAME)
        if not os.path.exists(referenceFile):
            print(f"\33[1;31mERROR\33[0m Testcase #{testnumber} either needs a 'cmp' field or a file in the test 'dir' named {DEFAULT_REF_FILE_NAME}")
            fails += 1
            continue
    elif not os.path.exists(testcase['cmp']):
        print(f"\33[1;31mERROR\33[0m Testcase #{testnumber} 'cmp' field %s is an invalid file path", testcase['cmp'])
        fails += 1
        continue

    builds = []
    if 'builds' in testcase:
        builds = testcase['builds']
    else:
        builds = [testcase['dir']]

    test_id = str(uuid.uuid4())
    test_diff = os.path.join('/tmp',f"{test_id}.diff")
    print(f"Running \"{testcase['name']}\" from \"{testcase['dir']}\" as {test_id}...")

    proc_args = ['go', 'run', '.', 'instrument', testcase['dir'], '--output', test_diff]
#    if appname := testcase.get('name'):
#        proc_args.extend(['--name', appname])

    status = subprocess.run(proc_args).returncode
    if status:
        print(f"\33[1;31mFAIL\33[0m easy-instrumentation exited with status {status}")
        fails += 1
        continue

    # keeps track of failure
    fail = False

    # generate the diff and complie the code
    diff_status = subprocess.run(['diff', '-B', '-b', '--color=always', '-L', 'expected', '-L', 'actual', referenceFile, test_diff]).returncode
    if diff_status:
        print(f"\33[1;31mFAIL\33[0m diff {diff_status}: output not as expected")
        fail = True

    for build in builds:
        print(f"Building {build}...")
        build_status = subprocess.run(['go', 'build', '.'], cwd=build).returncode
        if build_status:
            print(f"\33[1;31mFAIL\33[0m go build exited with status {build_status}")
            fail = True

    # clean up
    if cleanup:
        os.remove(test_diff)
        for build in builds:
            os.remove(os.path.join("./", build, os.path.split(build)[-1]))
        subprocess.run(['go', 'mod', 'tidy'], cwd=testcase['dir'])
    
    if fail:
        fails += 1
        continue

if fails == 0:
    print(f"\33[1;32mPASS\33[0m ran {len(tests['tests'])} with no errors.")
else:
    print(f"\33[1;31mFAIL\33[0m ran {len(tests['tests'])}; errors: {fails}")
    sys.exit(1)
