--- a/main.go
+++ b/main.go
@@ -4,15 +4,28 @@
 	"bytes"
 	"fmt"
 	"io"
+	"time"
+
+	"github.com/newrelic/go-agent/v3/newrelic"
 )
 
-func foo() error {
-	return fmt.Errorf("foo error")
+func foo(nrTxn *newrelic.Transaction) error {
+	defer nrTxn.StartSegment("foo").End()
+
+	// generated by go-easy-instrumentation; returnValue0:error
+	returnValue0 := fmt.Errorf("foo error")
+	if returnValue0 != nil {
+		nrTxn.NoticeError(returnValue0)
+	}
+
+	return returnValue0
 }
 
-func myFunction(r io.Reader) bool {
+func myFunction(r io.Reader, nrTxn *newrelic.Transaction) bool {
+	defer nrTxn.StartSegment("myFunction").End()
+
 	// we want to see that this error gets captured in the foo function, not here
-	err := foo()
+	err := foo(nrTxn)
 	if err != nil {
 		return false
 	}
@@ -20,11 +28,13 @@
 	// this error should be captured here
 	_, err = fmt.Fscan(r)
 	if err != nil {
+		nrTxn.NoticeError(err)
 		return false
 	}
 
 	// this error should be captured here in the body of this if statement
 	if err = fmt.Errorf("oopsiedoodle"); err != nil {
+		nrTxn.NoticeError(err)
 		return false
 	}
 
@@ -32,9 +37,18 @@
 }
 
 func main() {
+	NewRelicAgent, err := newrelic.NewApplication(newrelic.ConfigAppName("errors"), newrelic.ConfigFromEnvironment())
+	if err != nil {
+		panic(err)
+	}
+
 	buf := &bytes.Buffer{}
 	buf.WriteString("hello this is a test")
-	if myFunction(buf) {
+	nrTxn := NewRelicAgent.StartTransaction("myFunction")
+	if myFunction(buf, nrTxn) {
 		fmt.Println("myFunction returned true")
 	}
+	nrTxn.End()
+
+	NewRelicAgent.Shutdown(5 * time.Second)
 }
