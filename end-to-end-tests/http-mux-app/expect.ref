--- a/server.go
+++ b/server.go
@@ -10,6 +10,8 @@
 	"os/signal"
 	"sync/atomic"
 	"time"
+
+	"github.com/newrelic/go-agent/v3/newrelic"
 )
 
 type key int
@@ -24,6 +26,11 @@
 )
 
 func main() {
+	NewRelicAgent, err := newrelic.NewApplication(newrelic.ConfigAppName("http-mux web app"), newrelic.ConfigFromEnvironment())
+	if err != nil {
+		panic(err)
+	}
+
 	flag.StringVar(&listenAddr, "listen-addr", ":5000", "server listen address")
 	flag.Parse()
 
@@ -31,26 +38,36 @@
 	logger.Println("Server is starting...")
 
 	router := http.NewServeMux()
-	router.Handle("/", index())
-	router.Handle("/healthz", healthz())
+	nrTxn := NewRelicAgent.StartTransaction("index")
+	router.Handle(newrelic.WrapHandleFunc(NewRelicAgent, "/", index(nrTxn)))
+	nrTxn.End()
+	nrTxn = NewRelicAgent.StartTransaction("healthz")
+	router.Handle(newrelic.WrapHandleFunc(NewRelicAgent, "/healthz", healthz(nrTxn)))
+	nrTxn.End()
 
-	nextRequestID := func() string {
+	nextRequestID := func(nrTxn *newrelic.Transaction) string {
+		defer nrTxn.StartSegment("function literal").End()
+
 		return fmt.Sprintf("%d", time.Now().UnixNano())
 	}
 
+	nrTxn = NewRelicAgent.StartTransaction("logging")
 	server := &http.Server{
 		Addr:         listenAddr,
-		Handler:      tracing(nextRequestID)(logging(logger)(router)),
+		Handler:      tracing(nextRequestID)(logging(logger, nrTxn)(router)),
 		ErrorLog:     logger,
 		ReadTimeout:  5 * time.Second,
 		WriteTimeout: 10 * time.Second,
 		IdleTimeout:  15 * time.Second,
 	}
+	nrTxn.End()
 
 	done := make(chan bool)
 	quit := make(chan os.Signal, 1)
 	signal.Notify(quit, os.Interrupt)
 
+	// NR INFO: go-easy-instrumentation doesn't support tracing goroutines in a main method; please instrument manually.
+	// https://docs.newrelic.com/docs/apm/agents/go-agent/instrumentation/instrument-go-transactions/#goroutines
 	go func() {
 		<-quit
 		logger.Println("Server is shutting down...")
@@ -74,9 +75,13 @@
 
 	<-done
 	logger.Println("Server stopped")
+
+	NewRelicAgent.Shutdown(5 * time.Second)
 }
 
-func index() http.Handler {
+func index(nrTxn *newrelic.Transaction) http.Handler {
+	defer nrTxn.StartSegment("index").End()
+
 	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
 		if r.URL.Path != "/" {
 			http.Error(w, http.StatusText(http.StatusNotFound), http.StatusNotFound)
@@ -89,7 +92,9 @@
 	})
 }
 
-func healthz() http.Handler {
+func healthz(nrTxn *newrelic.Transaction) http.Handler {
+	defer nrTxn.StartSegment("healthz").End()
+
 	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
 		if atomic.LoadInt32(&healthy) == 1 {
 			w.WriteHeader(http.StatusNoContent)
@@ -99,7 +104,9 @@
 	})
 }
 
-func logging(logger *log.Logger) func(http.Handler) http.Handler {
+func logging(logger *log.Logger, nrTxn *newrelic.Transaction) func(http.Handler) http.Handler {
+	defer nrTxn.StartSegment("logging").End()
+
 	return func(next http.Handler) http.Handler {
 		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
 			defer func() {
